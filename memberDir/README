Author: Tom Lang 12/2001

OVERVIEW

The members.pl program creates the Member Directory web pages.

The URL for the member directory is http://reg.vpchat.com/VP/members
This is actually a Perl program that figures out what to do based on
query string input and cookies.

The member directory has four variations -
- People online now
- People with Profile information in the database
- People with home pages
- Everyone

There are a ton of web pages involved, and it would be way too much overhead
to generate all this on the fly - yet we want to have dynamic information
that updates in near real time.

So, what the member web page does is figure out which static HTML page to
show based on the query string and cookie input.

The program here, members.pl, updates the static HTML pages intermittently.
Thus we have the best of both worlds - the speed of static HTML pages yet
the information is dynamic.

For each of the four categories, there are two layers -
- The top level, which shows an alphabetical listing of names, grouped in
large chunks.
- When a chunk name is click in the top level page, a sub page is shown that
has the directory information for all the people in that chunk.

A person can navigate through the chunks with Next and Prev buttons, or click
Top to go back to the top level. A query string parameter in the web page
specifies the chunk name.

A cookie keeps track of which version, or view, the user last picked. So, for
example, if you looked at the home-page view, next time you come back to
the member directory you get the home-page view by default.

We want to be able to spread the web server load across multiple machines,
so this complicates the job of updating the static HTML pages that comprise
the member directory. We use NFS to mount the directory containing the pages,
so one server has a fast copy and the others serve the pages via NFS. The
overhead is not too bad, and probably faster the rsync or rcp'ing all the
files to all the servers.

RELATED FILES

Since we're going through all the trouble to figure out how many active 
members we have, and how many have profiles, and how many have web pages,
this program also upates the statistics information that we display on
the http://vpchat.com home page, and other places.

DATA SOURCES

The Sybase database is the source of much of the information. There is a
getMemberDirecrtory stored procedure which returns a list of all the active
names, annotated by whether they have a Profile in the database too.

The database also has a table with a row for every home page, indexed by
user name.

To find who is online, this program reads the users.txt file that is 
generated by the vpplaces.exe server. This file contains one line per
logged in user (buddy and chat). This file also has a list of room names
where people are chatting. This information is used in the online view,
showing not only that a person is online but in which room.

We have two communities, vpchat and vpadult, so there are two sources of
'who is online'.

To find the number of chatrooms in use, the stats file generates by the 
vpstats.exe server is used. It contains one line per chatroom in active use.

Just after midnight the daily.pl program runs and creates yesterday.dat,
which is a summary of usage information for yesterday. This is included
in the stats snapshot.

THE PROCESS

- Get the names of the chat rooms
- Get the number of members and profiles
- Get the number of people online
- Get the number of home pages
- Get the number of chat rooms
- Get yesterday's summary
- Create the statistics snaphot (HTML fragment)
- Make the four views of the directory (whole lot of HTML files)
- Push the stats snapshot out to the front end servers
- Push out a version of the sign in page to the front end servers, which
has updated population totals in it
